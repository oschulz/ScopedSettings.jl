var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Modules","page":"API","title":"Modules","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:module]","category":"page"},{"location":"api/#Types-and-constants","page":"API","title":"Types and constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:type, :constant]","category":"page"},{"location":"api/#Functions-and-macros","page":"API","title":"Functions and macros","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:macro, :function]","category":"page"},{"location":"api/#Documentation","page":"API","title":"Documentation","text":"","category":"section"},{"location":"api/#ScopedSettings.ScopedSettings","page":"API","title":"ScopedSettings.ScopedSettings","text":"ScopedSettings\n\nScoped settings in Julia, building on ScopedValues.\n\n\n\n\n\n","category":"module"},{"location":"api/#ScopedSettings.GetPreference","page":"API","title":"ScopedSettings.GetPreference","text":"struct GetPreference{T} <: Function\n\nRepresents a function that retrieves an a preference via Julia Preferences.jl, environment variables and a default value.\n\nConstructors:\n\nGetPreference(m::Module, pref_name::AbstractString, x_default; f_conv = nothing)\nGetPreference(m::Module, pref_name::AbstractString, env_name::AbstractString, x_default; f_conv = nothing)\nGetPreference{T}(m::Module, pref_name::AbstractString, env_name::AbstractString, x_default; f_conv = nothing)\n\nIf env_name is not specified, it defaults to the uppercase module name, followed by JL_, followed by the uppercase preference name.\n\nExample:\n\nf_getpref = GetPreference(SomePackage, \"some_pref\", 42)\n\ndelete!(ENV, \"SOMEPACKAGEJL_SOME_PREF\")\nf_getpref() == 42\n\nENV[\"SOMEPACKAGEJL_SOME_PREF\"] = \"11\"\nf_getpref() == 11\n\nThe return value of f_getpref() depends on the LocalPreferences.toml files (if any) in your LOAD_PATH that have entries like\n\n[SomePackage]\nsome_pref = 22\n\n(see the Preferences docs) and the environment variable SOMEPACKAGEJL_SOME_PREF (if set). Environment variables take precedence over preferences. If neither is set, f_getpref() returns the default value (42 in this case).\n\nBy default, GetPreference{T} function objects use ScopedSettings.convert_preference to convert preferences TOML values and environment variable string values to T. Via f_conv = my_f_conv you can set a custom conversion function my_f_conv(pref_or_env_var_value)::T.\n\n\n\n\n\n","category":"type"},{"location":"api/#ScopedSettings.ScopedSetting","page":"API","title":"ScopedSettings.ScopedSetting","text":"struct ScopedSetting{T,F<:Base.Callable}\n\nA scoped setting, similar to a ScopedValues.ScopedValue, but with a mutable global default value.\n\nConstructors:\n\nScopedSetting(x_default)\nScopedSetting(f_default::Function)\nScopedSetting(ctor_default::Type)\nScopedSetting{T,F}(f_default::F) where {T,F<:Base.Callable}\n\nExample:\n\ns = ScopedSetting(42)\n\ns[] == 42\n\ns[] = 11\ns[] == 11\n\ns[] = nothing\ns[] == 42\n\nwith(s => 21) do\n    s[] == 21\nend\n\ns[] == 42\n\n\n\n\n\n","category":"type"},{"location":"api/#ScopedSettings.convert_preference","page":"API","title":"ScopedSettings.convert_preference","text":"ScopedSettings.convert_preference(::Type{T}, toml_value)\nScopedSettings.convert_preference(::Type{T}, env_string::AbstractString)\n\nConvert a Preferences.jl TOML value or an environment variable string to the specified type T.\n\nconvert_preference is used by GetPreference{T} function objects and is open to specialization for custom types T.\n\n\n\n\n\n","category":"function"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"#ScopedSettings.jl","page":"Home","title":"ScopedSettings.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ScopedSettings builds on ScopedValues (equivalent to Base.ScopedValues for Julia >= v1.11) to implement scoped settings.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A ScopedSetting{T}, like a ScopedValue{T}, can be set to different values in different scopes. But unlike a ScopedValue, the global default value of a ScopedSetting can either be a value or can be computed on the fly, and can be mutated via a global override. ScopedSettings integrates with Preferences to base ScopedValue default values on preferences and environment variables.","category":"page"},{"location":"","page":"Home","title":"Home","text":"So while a scoped setting","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ScopedSettings\n\nsome_setting = ScopedSetting(42)\nsome_setting isa ScopedSetting{Int}","category":"page"},{"location":"","page":"Home","title":"Home","text":"is accessed like a ScopedValue","category":"page"},{"location":"","page":"Home","title":"Home","text":"some_setting[] == 42","category":"page"},{"location":"","page":"Home","title":"Home","text":"it's global default value can be overridden","category":"page"},{"location":"","page":"Home","title":"Home","text":"some_setting[] = 11\nsome_setting[] == 11","category":"page"},{"location":"","page":"Home","title":"Home","text":"and can also be restored to the original default value","category":"page"},{"location":"","page":"Home","title":"Home","text":"some_setting[] = nothing\nsome_setting[] == 42","category":"page"},{"location":"","page":"Home","title":"Home","text":"The global default can also be function (without arguments):","category":"page"},{"location":"","page":"Home","title":"Home","text":"other_setting = ScopedSetting(()->rand())\n[other_setting[], other_setting[], other_setting[]] # random values\n\nother_setting[] = 1.2 # override\nother_setting[] == 1.2 # no more random values","category":"page"},{"location":"","page":"Home","title":"Home","text":"Like with a ScopedValue, scoped settings can be set to different values for different scopes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@with some_setting => 33 other_setting => 5.2 begin\n    # Within this scope, we have\n    some_setting[] == 33 && other_setting[] == 5.2\nend\n\nwith(some_setting => 33, other_setting => 5.2) do\n    # Within this scope, we have\n    some_setting[] == 33 && other_setting[] == 5.2\nend\n\n# Globally we still have\nsome_setting[] == 42\nother_setting[] == 1.2","category":"page"},{"location":"","page":"Home","title":"Home","text":"ScopedSettings re-exports ScopedValues.@with and ScopedValues.with(...). You can mix ScopedSetting and ScopedValue objects in @with expressions and with(...) calls.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To base ScopedSetting default values on package preferences and environment variables, ScopedSettings provides GetPreference{T} function objects:","category":"page"},{"location":"","page":"Home","title":"Home","text":"setting_foo = ScopedSetting(GetPreference(SomePackage, \"foo\", 42))\nsetting_bar = ScopedSetting(GetPreference(SomePackage, \"bar\", :green))\n\nsetting_foo[] == either_envvar_or_preference_value_or_42\nsetting_bar[] == either_envvar_or_preference_value_or_green\n\n@with setting_foo => 11 setting_bar => :blue begin\n    # Different values within this scope\n    setting_foo[] == 11 && setting_bar[] == :blue\nend\n\n# Original values outside of the scope\nsetting_foo[] == either_envvar_or_preference_value_or_42\nsetting_bar[] == either_envvar_or_preference_value_or_green","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the global scope, the value of setting_foo[] will depend on the LocalPreferences.toml files (if any) in your LOAD_PATH that have entries like","category":"page"},{"location":"","page":"Home","title":"Home","text":"[SomePackage]\nfoo = 33\nbar = \"turquoise\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"and environment variables like SOMEPACKAGEJL_FOO and SOMEPACKAGEJL_BAR (environment variables take precedence over preferences).","category":"page"},{"location":"","page":"Home","title":"Home","text":"GetPreference can also be used standalone, without ScopedSetting. The direct return values of GetPreference function objects are scope-independent, of course:","category":"page"},{"location":"","page":"Home","title":"Home","text":"get_foo = GetPreference(SomePackage, \"foo\", 42)\nget_bar() == either_envvar_or_preference_value_or_42","category":"page"}]
}
